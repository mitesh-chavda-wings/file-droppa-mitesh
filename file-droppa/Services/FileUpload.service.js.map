{"version":3,"sources":["../../lib/Services/FileUpload.service.ts"],"names":[],"mappings":"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","file":"FileUpload.service.js","sourceRoot":"","sourcesContent":["import {Injectable, EventEmitter, Output, Input, NgZone} from \"@angular/core\";\n\n\nexport class FileUpload {\n    private zone = new NgZone({enableLongStackTrace: false});\n    public url = null;\n    public beforeRequest = null;\n    public beforeFileUpload = null;\n    public fileUploadedEvent = new EventEmitter(true);\n\n    uploadFiles(iFiles){\n        return Promise.all(iFiles.reduce((res, iFile) => {\n            return res.push(this.uploadFile(iFile)), res;\n        }, []))\n    }\n\n    uploadFile(iFile) {\n        if (!this.url) {\n            throw \"url to upload needs to be provided\";\n        }\n        if (iFile.loading) {\n            throw \"Already under loading\";\n        }\n        let that = this,\n            formData = new FormData();\n\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.upload.onprogress = (event) => {\n            let progress = (event.loaded * 100) / event.total | 0;\n            this.zone.run(()=> {\n                iFile.percentage = progress;\n            })\n        };\n\n        const pr = new Promise((resolve, reject)=> {\n            xhr.onload = xhr.onerror = function (e) {\n                that.zone.run(()=> {\n                    if (this[\"status\"] == 200) {\n                        iFile.loading = false;\n                        iFile.loadingSuccessful = true;\n                        resolve(true);\n                    } else {\n                        iFile.loading = false;\n                        iFile.loadingSuccessful = false;\n                        reject(false);\n                    }\n                })\n            };\n        }).then((success)=>{\n            this.fileUploadedEvent.emit([success, xhr.response, iFile]);\n        }, (reason)=>{\n            this.fileUploadedEvent.emit([reason, xhr.response, iFile]);\n        });\n\n        iFile.loading = true;\n\n        xhr.open(\"POST\", this.url, true);\n\n        //Hook before request to provide user ability to add headers or something else in XHR\n        typeof this.beforeRequest === \"function\" && this.beforeRequest(xhr);\n\n        formData.append(`${iFile.File.name}`, iFile.File);\n\n        if(typeof this.beforeFileUpload === \"function\"){\n            Promise.resolve(this.beforeFileUpload(formData)).then((formData)=> {\n                formData && xhr.send(formData);\n                formData || console.warn(`beforeFileUpload didn't return formData for ${iFile.File.name} and upload was aborted`);\n            });\n        } else {\n            xhr.send(formData);\n        }\n\n        return pr;\n    }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}     \n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}