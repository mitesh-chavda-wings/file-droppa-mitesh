{"version":3,"sources":["../../lib/Services/FileParser.service.ts"],"names":[],"mappings":"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","file":"FileParser.service.js","sourceRoot":"","sourcesContent":["import {Injectable} from \"@angular/core\";\n\nexport class FileParser {\n    processFilesFromInput(items) {\n        let newFiles = Object.keys(items).reduce((result, key)=> {\n            let entry,\n                item = items[key];\n\n            if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\n                if (entry.isFile) {\n                    result.push(Promise.resolve(item.getAsFile()));\n                } else if (entry.isDirectory) {\n                    result.push(this.processDirectory(entry));\n                }\n            } else if (item.getAsFile != null) {\n                if ((item.kind == null) || item.kind === \"file\") {\n                    result.push(Promise.resolve(item.getAsFile()));\n                }\n            } else if (item.isFile) {\n                let pr = new Promise((resolve, reject)=> {\n                    item.file(resolve, reject);\n                });\n                result.push(pr);\n            } else if (item.isDirectory) {\n                result.push(this.processDirectory(item));\n            }\n            return result;\n        }, []);\n\n        return Promise.all(newFiles).then(this.flattenArrayOfFiles)\n    }\n\n    processDirectory(directory) {\n        let dirReader = directory.createReader(),\n            result = [];\n\n        var readEntries = () => {\n            return new Promise((resolve, reject)=> {\n                dirReader.readEntries((entries) => {\n                    let pr = [];\n\n                    if (entries.length) {\n                        for (var i = 0; i < entries.length; i++) {\n                            pr.push(this.processFilesFromInput({0: entries[i]}));\n                        }\n                    } else {\n                        resolve(null);\n                    }\n                    result.push(readEntries());\n                    Promise.all(pr).then(this.flattenArrayOfFiles).then(resolve);\n                }, (error)=> {\n                    reject(\"Error while reading folder\");\n                });\n            })\n        };\n\n        result.push(readEntries());\n        return Promise.all(result).then(this.flattenArrayOfFiles);\n    }\n\n    processInputFromDrop(e) {\n        let items = e.dataTransfer.items;\n\n        if (items && items.length && (items[0].webkitGetAsEntry != null)) {\n            return Promise.resolve(this.processFilesFromInput(items));\n        } else if (items && items.length && !items[0].webkitGetAsEntry) {\n            return Promise.resolve(items)\n        } else if(e.dataTransfer.files){\n            let files = [];\n            for(let i = 0, l = e.dataTransfer.files.length;i<l;i++){\n                files.push(e.dataTransfer.files[i]);\n            }\n            return Promise.resolve(files);\n        }\n    }\n\n    flattenArrayOfFiles(arrayOfPromises) {\n        return Promise.resolve(arrayOfPromises.reduce((result, file) => {\n            if (file) {\n                return [...result, ...file];\n            }\n        }, []));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}